{"version":3,"sources":["components/FriendCard/index.js","components/Wrapper/index.js","components/Title/index.js","components/Points/index.js","App.js","index.js"],"names":["FriendCard","props","className","alt","name","src","image","onClick","checkClick","id","Wrapper","children","Title","Points","gameReset","App","state","friends","points","totalClicked","map","friend","clicked","alert","console","log","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","shuffle","setState","this","key","Component","ReactDOM","render","document","getElementById"],"mappings":"q1DAgBeA,MAbf,SAAoBC,GAClB,OACE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,iBACb,yBAAKC,IAAKF,EAAMG,KAAMC,IAAKJ,EAAMK,SAEnC,yBAAKJ,UAAU,WACb,4BAAQA,UAAU,SAASK,QAAS,kBAAMN,EAAMO,WAAWP,EAAMQ,MAAjE,gB,MCHOC,MAJf,SAAiBT,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAMU,W,MCG1BC,MAJf,SAAeX,GACb,OAAO,wBAAIC,UAAU,SAASD,EAAMU,W,MCGvBE,MAJf,SAAgBZ,GACd,OAAO,wBAAIC,UAAU,UAAUD,EAAMU,W,OCInCG,GAAY,EAwFDC,E,2MApFbC,MAAQ,CACNC,UACAC,OARS,EASTC,aARe,G,EAWjBX,WAAa,SAAAC,GAGX,IAAIQ,EAAU,EAAKD,MAAMC,QAAQG,KAAI,SAAAC,GAWnC,OAVIA,EAAOZ,KAAOA,KACO,IAAnBY,EAAOC,SACTC,MAAM,sBAAwB,EAAKP,MAAME,QACzC,EAAKF,MAAME,OAAS,EACpBJ,GAAY,IAEZ,EAAKE,MAAME,SACXG,EAAOC,SAAU,IAGdD,KAGiB,KAAtB,EAAKL,MAAME,SACbK,MAAM,cACN,EAAKP,MAAME,OAAS,EACpBJ,GAAY,IAGI,IAAdA,IACFG,EAAU,EAAKD,MAAMC,QAAQG,KAAI,SAAAC,GAG/B,OAFAA,EAAOC,SAAU,EACjBR,GAAY,EACLO,MAGXG,QAAQC,IAAIR,GACZ,SAAiBS,GAMf,IALA,IACEC,EACAC,EAFEC,EAAeH,EAAMI,OAKlB,IAAMD,GAEXD,EAAcG,KAAKC,MAAMD,KAAKE,SAAWJ,GAIzCF,EAAiBD,EAHjBG,GAAgB,GAIhBH,EAAMG,GAAgBH,EAAME,GAC5BF,EAAME,GAAeD,EAMzBO,CAAQjB,GAIR,EAAKkB,SAAS,CAAElB,a,wEAIR,IAAD,OACP,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,qBACA,kBAAC,EAAD,gBAAiBmB,KAAKpB,MAAME,QAC3BkB,KAAKpB,MAAMC,QAAQG,KAAI,SAAAC,GAAM,OAC5B,kBAAC,EAAD,CACEb,WAAY,EAAKA,WACjBC,GAAIY,EAAOZ,GACX4B,IAAKhB,EAAOZ,GACZH,MAAOe,EAAOf,MACdgB,QAASD,EAAOC,kB,GA9EVgB,a,MCLlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.1bf17d8c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction FriendCard(props) {\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"img-container\">\r\n        <img alt={props.name} src={props.image} />\r\n      </div>\r\n      <div className=\"content\">\r\n        <button className=\"button\" onClick={() => props.checkClick(props.id)}>Click Me!</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FriendCard;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Title(props) {\r\n  return <h1 className=\"title\">{props.children}</h1>;\r\n}\r\n\r\nexport default Title;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Points(props) {\r\n  return <h1 className=\"Points\">{props.children}</h1>;\r\n}\r\n\r\nexport default Points;\r\n","import React, { Component } from \"react\";\r\nimport FriendCard from \"./components/FriendCard\";\r\nimport Wrapper from \"./components/Wrapper\";\r\nimport Title from \"./components/Title\";\r\nimport Points from \"./components/Points\";\r\nimport friends from \"./friends.json\";\r\nvar points = 0;\r\nvar totalClicked = 0;\r\nvar gameReset = false;\r\n\r\nclass App extends Component {\r\n  // Setting this.state.friends to the friends json array\r\n  state = {\r\n    friends,\r\n    points,\r\n    totalClicked\r\n  };\r\n\r\n  checkClick = id => {\r\n    // Filter this.state.friends for friends with an id not equal to the id being removed\r\n\r\n    var friends = this.state.friends.map(friend => {\r\n      if (friend.id === id) {\r\n        if (friend.clicked === true) {\r\n          alert(\"You failed! Score: \" + this.state.points);\r\n          this.state.points = 0;\r\n          gameReset = true;\r\n        } else {\r\n          this.state.points++;\r\n          friend.clicked = true;\r\n        }\r\n      }\r\n      return friend;\r\n    });\r\n\r\n    if (this.state.points === 10) {\r\n      alert(\"You won!!!\");\r\n      this.state.points = 0;\r\n      gameReset = true;\r\n    }\r\n\r\n    if (gameReset === true) {\r\n      friends = this.state.friends.map(friend => {\r\n        friend.clicked = false;\r\n        gameReset = false;\r\n        return friend;\r\n      });\r\n    }\r\n    console.log(friends);\r\n    function shuffle(array) {\r\n      var currentIndex = array.length,\r\n        temporaryValue,\r\n        randomIndex;\r\n\r\n      // While there remain elements to shuffle...\r\n      while (0 !== currentIndex) {\r\n        // Pick a remaining element...\r\n        randomIndex = Math.floor(Math.random() * currentIndex);\r\n        currentIndex -= 1;\r\n\r\n        // And swap it with the current element.\r\n        temporaryValue = array[currentIndex];\r\n        array[currentIndex] = array[randomIndex];\r\n        array[randomIndex] = temporaryValue;\r\n      }\r\n\r\n      return array;\r\n    }\r\n\r\n    shuffle(friends);\r\n    \r\n\r\n    // Set this.state.friends equal to the new friends array\r\n    this.setState({ friends });\r\n  };\r\n\r\n  // Map over this.state.friends and render a FriendCard component for each friend object\r\n  render() {\r\n    return (\r\n      <Wrapper>\r\n        <Title>Clicky Game!</Title>\r\n        <Points>Points: {this.state.points}</Points>\r\n        {this.state.friends.map(friend => (\r\n          <FriendCard\r\n            checkClick={this.checkClick}\r\n            id={friend.id}\r\n            key={friend.id}\r\n            image={friend.image}\r\n            clicked={friend.clicked}\r\n          />\r\n        ))}\r\n      </Wrapper>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}